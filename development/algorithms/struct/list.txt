====== Описание ======
Список - это совокупность элементов одного типа, распределенных в памяти. Каждый элемент списка помимо значения, хранит ссылку на следующий элемент того же списка.

====== Свойства ======
^ Свойство ^ Значение ^
|Повторение элементов|Да|
|Упорядоченность элементов|Да|
|Доступ к элементу|Перебором|

====== Реализации ======
===== Прямой =====
{{ .:media:list.png |Схема связей}}
  * Элемент коллекции это структура, хранящая данные и указатель на такой элемент;
  * Каждый элемент (кроме последнего) должен ссылаться на следующий, связывая элементы коллекции;
  * Структура хранит указатель на первый элемент коллекции.

==== Плюсы ====
  * Добавление элементов с начала коллекции

==== Минусы ====
  * Добавление элементов с конца коллекции
  * Поиск

==== Операции ====
<code>
class List
  class Item
    // Значение элемента.
    mixed value
    // Следующий элемент.
    Item* next
    
    function Item(value)
      value = value
      next = null
    
  // Адрес первого элемента
  Item* first
  
  // Получить элемент по индексу.
  function get(index)
    target = first
    while index--
      target = target.next
    return target
  
  // Вставить элемент в начало списка.
  function add(value)
    newItem = new Item(value)
    newItem.next = first
    first = newItem
  
  // Найти первый элемент с заданным значением.
  function find(value)
    target = first
    while target
      if target.value == value
        return target
      else
        target = taget.next
    return null
</code>

===== Обратный =====
{{ .:media:list_reverse.png |Схема связей}}
  * Элемент коллекции это структура, хранящая данные и указатель на такой элемент;
  * Каждый элемент (кроме первого) должен ссылаться на предыдущий, связывая элементы коллекции;
  * Структура хранит указатель на последний элемент коллекции.

==== Плюсы ====
  * Добавление элементов с конца коллекции

==== Минусы ====
  * Добавление элементов с начала коллекции
  * Поиск

==== Операции ====
<code>
class ListReverse
  class Item
    // Значение элемента.
    mixed value
    // Предыдущий элемент.
    Item* pre
    
    function Item(value)
      value = value
      pre = null
    
  // Адрес последнего элемента
  Item* last
  
  // Получить элемент по индексу с конца списка.
  function get(rIndex)
    target = last
    while rIndex--
      target = target.pre
    return target
  
  // Вставить элемент в конец списка.
  function add(value)
    newItem = new Item(value)
    newItem.pre = last
    last = newItem
  
  // Найти последний элемент с заданным значением.
  function find(value)
    target = first
    while target
      if target.value == value
        return target
      else
        target = taget.pre
    return null
</code>

===== Двунаправленный =====
{{ .:media:list_double.png |Схема связей}}
  * Элемент коллекции это структура, хранящая данные и два указателя на такой элемент;
  * Каждый элемент должен ссылаться на предыдущий (кроме первого) и следующий (кроме последнего), связывая элементы коллекции;
  * Структура хранит указатель на первый и последний элементы коллекции.

==== Плюсы ====
  * Добавление элементов с конца коллекции
  * Добавление элементов с начала коллекции

==== Минусы ====
  * Поиск
  * Потребление памяти

==== Операции ====
<code>
class ListDouble
  class Item
    // Значение элемента.
    mixed value
    // Следующий элемент.
    Item* next
    // Предыдущий элемент.
    Item* pre
    
    function Item(value)
      value = value
      next = null
      pre = null
    
  // Адрес первого элемента
  Item* first
  // Адрес последнего элемента
  Item* last
  
  // Получить первый элемент.
  functon getFirst()
    return first
  
  // Получить последний элемент.
  function getLast()
    return last
  
  // Вставить элемент в начало списка.
  function addBefore(value)
    newItem = new Item(value)
    newItem.next = first
    first.pre = newItem
    first = newItem
    
  // Вставить элемент в конец списка.
  function addAfter(value)
    newItem = new Item(value)
    newItem.pre = last
    last.next = newItem
    last = newItem
</code>

~~DISQUS~~
