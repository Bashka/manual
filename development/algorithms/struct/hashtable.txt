====== Описание ======
Хэш-таблица - это массив списков, элементы в которых сгруппированы по хэшу их значений.

===== Свойства =====
^ Свойство ^ Значение ^
|Повторение элементов|Возможно внутри списков|
|Упорядоченность элементов|Возможно внутри списков|
|Доступ к элементу|По текстовому ключу|

====== Реализации ======
===== Деление по модулю =====
{{ .:media:hashtable.png |Схема связей}}
  * Элементы коллекции это данные любого типа, по которым можно получить целочисленный хэш;
  * Все элементы коллекции расположены в нескольких списках;
  * Все списки расположены в массиве;
  * Список, в который добавляется новый элемент коллекции определяется путем вычисления целочисленного хэша этого элемента и использования его как индекс массива;
  * Получение элемента коллекции реализуется путем вычисления целочисленного хэша этого элемента, определения с его помощью списка, в котором расположен элемент, а затем последовательного поиска элемента в этом списке.
  * Структура хранит массив.

==== Плюсы ====
  * Поиск по ключу
  * Изменение структуры списков
  * Изменение значения

==== Минусы ====
  * Поиск по значению
  * Изменение ключа
  * Изменение структуры массива
  * Потребление памяти

==== Операции ====
<code>
class HashTable
  class Item
    // Ключ элемента.
    mixed key
    // Значение элемента.
    mixed value

  // Массив списков.
  Vector store
  // Размерность таблицы.
  int size
  
  function HashTable(size)
    store = new Vector(List, size)

  function add(Item item)
    hash = toInt(item.key) % size
    list = store[hash]
    list.add(item)
  
  function remove(key)
    hash = toInt(key) % size
    list = store[hash]
    list.remove(key)
  
  function get(key)
    hash = toInt(key) % size
    list = store[hash]
    return list.find(key)
</code>

~~DISQUS~~
