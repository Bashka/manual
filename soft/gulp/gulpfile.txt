====== gulpfile ======

Файл ''gulpfile.js'' используется Gulp для определения задач сборки проекта. Этот файл включает объявление списка зависимостей и реализацию задач сборки.

===== Объявление зависимостей =====

Зависимости Gulp объявляются с помощью команды ''require'':

<code javascript>
var gulp = require('gulp'),
  clean = require('gulp-clean'),
  ...
</code>

Перечисленные здесь зависимости будут доступны во всех задачах этого файла.

===== Ядро gulp =====

Утилита Gulp реализована в виде ядра ''gulp'', которое представляет механизм загрузки и выгрузки файлов проекта с возможность обработки их с помощью сторонних плагинов в промежутке между этими действиями. Вызов утилиты Gulp сопровождается указанием целевой задачи сборки проекта:

<code bash>
gulp build
</code>

==== task ====

Для реализации задач сборки проекта используется метод ''gulp.task''. Он принимает три параметра:

  * Имя реализуемой задачи
  * Массив имен задач (не обязательно), которые должны быть выполнены до выполнения данной задачи
  * Функция, реализующая задачу

Пример объявления задачи:

<code javascript>
// gulpfile.js
var gulp = require('gulp');

gulp.task('clean', function(){
  // Отчистка проекта.
});

gulp.task('build', ['clean'], function(){
  // Сборка проекта
})
</code>

==== src ====

Для загрузки файлов для обработки используется метод ''gulp.src''. Он принимает два параметра:

  * Glob-шаблон или массив имен файлов, которые необходимо загрузить. Для указания исключаемых файлов используется префикс ''!''
  * Опции загрузки (не обязательно), такие как:
    * ''read'' - следует ли считывать содержимое файла или достаточно получить их адреса (к примеру для операции отчистки проекта содержимое файлов считывать не обязательно)

После загрузки файлов они могут переданы для обработки плагинами с помощью метода ''pipe'':

<code javascript>
// gulpfile.js
var gulp = require('gulp');
  concat = require('gulp-concat');

...

gulp.task('build', ['clean'], function(){
  gulp.src('src/js/*.js', '!src/js/*.tmp.js') // Загрузка файлов с расширением js
    .pipe(concat('index.js')) // Объединение загруженных файлов в один
    ...
})
</code>

==== dest ====

Часто после обработки загруженных файлов, результат необходимо сохранить в виде нового файла, для чего исопльзуется метод ''gulp.dest''. Он принимает следующие параметры:

  * Путь, по которому необходимо сохранить результат. Это может быть адрес каталога, в который будет сохранен результат, или имя конкретного файла, в зависимости от используемых плагинов
  * Опции выгрузки (не обязательно), такие как:
    * ''mode'' - права доступа к создаваемым файлам

<code javascript>
// gulpfile.js
var gulp = require('gulp');
  concat = require('gulp-concat');

...

gulp.task('build', ['clean'], function(){
  gulp.src('src/js/*.js')
    .pipe(concat('index.js'))
    .pipe(gulp.dest('build/js')); // Сохранение результата в каталоге build/js
})
</code>

==== run ====

Иногда в теле задачи необходимо вызвать обработку другой задачи. Сделать это можно с помощью метода ''gulp.run'', который принимает следующие параметры:

  * Имя вызываемой задачи

<code javascript>
// gulpfile.js
...

gulp.run('clean');
</code>

==== watch ====

Метод ''gulp.watch'' позволяет отслеживать изменения в указанных файлах проекта и вызывать соответствующие обработчики. Он принимает следующие параметры:

  * Glob-шаблон имен файлов, которые необходимо отслеживать
  * Опции выгрузки (не обязательно), такие как:
    * ''interval'' - периодичность проверки изменений в отслеживаемых файлах (в микросекундах)
    * ''debounceDelay'' - задержка вызова события обработки (в микросекундах) для одного файла. Второе изменение файла, выполненное раньше указанного в этой опции срока относительно первого изменения, не будет фиксироваться
    * ''cwd'' - адрес текущей директории отслеживаемых файлов
  * Массив задач, которые необходимо вызвать при изменении отслеживаемых файлов или функция-обработчик

<code javascript>
// gulpfile.js
...

gulp.task('watch', function(){
  gulp.watch('src/js/*.js', ['clean', 'build']); // Вызов clean и build задач при изменении файлов js
});
</code>

~~DISQUS~~
