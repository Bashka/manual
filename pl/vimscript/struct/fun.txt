====== Объявление ======
Для объявления функции используется запись:
<code vim>
function область:имя([аргумент])
  тело
endfunction
</code>
Функции могут относится к тем же областям видимости, что и [[..:data:variable|переменные]]. Если функция относится к глобальной области (''g:''), то ее имя должно начинаться на заглавную букву.

Использование записи ''function!'' вместо ''function'' делает функцию переопределяющей. Это означает, что в случае, если к моменту объявления функция с таким именем уже существовала, она будет переопределена данной.

Для просмотра списка всех объявленных функций используется команда '':function''.

Пример объявления функции:
<code vim>
function MyFun()
  echo 'Hello world'
endfunction
</code>

====== Вызов ======
Для вызова функции используется команад ''call'':
<code vim>
call g:MyFun()
</code>

Если функция возвращает некоторое значение, ее можно вызвать внутри выражения или другой команды:
<code vim>
let result = g:MyFun()
echo g:MyFun()
</code>

Команда ''call'' так же может быть использована для вызова функции следующим образом:
<code vim>
call call(имяФункции, массивПараметров, [словарь])
</code>
Если используется третий параметр, функция будет вызвана в контексте этого словаря.

====== Параметры ======
Аргуметы функции имеют область видимости ''a:'':
<code vim>
function MyFun(x, y)
  return a:x + a:y
endfunction
</code>

Если функция может принимать динамическое число аргументов, используется запись ''...''. Доступ к таким аргументам осуществляется с помощью следующих переменных:
  * ''a:000'' - массив динамических параметров;
  * ''a:1'', ''a:2'', ..., ''a:9'' - динамические параметры в порядке их передачи;
  * ''a:0'' - количество динамических параметров, переданных в функцию.
<code vim>
function MyFun(...)
  echo 'Переданного ' a:0 ' параметров.'
endfunction
</code>

====== Возвращаемое значение ======
Для возврата значения из функции используется команда ''return значение''. После возврата значения, функция прекращает работу.

Пример использования:
<code vim>
function MyFun(x, y)
  return a:x + a:y
endfunction
</code>

====== Косвенные ссылки ======
На функцию можно ссылаться из переменной. Для этого используется функция ''function(имя)'', которая возвращает ссылку на функцию:
<code vim>
let s:Fun = function('MyFun')
echo s:Fun(2, 2)
</code>
Важно помнить, что если для хранения ссылки на функцию используется глобальная переменная (''g:''), то ее имя должно начинаться с заглавной буквы.

Хранить ссылку на функцию может не только переменная, но и элемент словаря (в этом случае она называется методом). Для этого используется следующая запись:
<code vim>
function словарь.имяМетода([аргументы]) dict
  тело
endfunction
</code>
Вызвать такую функцию можно стандартными средствами:
<code vim>
call словарь.метод()
echo словарь.метод()
</code>
При таком вызове (в контексте словаря) в теле метода доступна переменная ''self'', которая ссылается на словарь этого метода:
<code vim>
let s:obj = {'prop': 1}
function s:obj.getProp() dict
  return self.prop " 1
endfunction
</code>
