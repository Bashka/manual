====== Литералы ======
Строковый тип является единственным, не составным типом в Bash. Строковые данные записываются двумя способами:
  * В одинарных кавычках - строка воспринимается "как есть";
  * В двойных кавычках - строка перед использованием проверяется на предмет наличия в ней специальных символов (на пример переменных или символов новой строки), которые заменяются конкретными значениями.

Если необходимо передать в качестве параметра команде строку, хранящуюся в переменной, ее следует обрамить двойными кавычками:
<code bash>
echo `expr length "$str"`
</code>

====== Операторы ======
  * ''строка строка'' - конкатенация строк;
<code bash>
a='Hello'
a=$a' world'
echo $a # Hello world
</code>
  * ''expr length строка'' - длина строки;
  * ''expr index строка символ'' - поиск первого вхождения заданного символа в строке (первый символ имеет индекс 1);
  * ''expr substr строка начало количество'' - получение подстроки (первый символ имеет индекс 1);
<code bash>
a='Hello world'
pos=`expr index "$a" 'w'`
echo `expr substr "$a" $pos 5`
</code>
  * ''expr match строка регулярноеВыражение'' - число символов от начала строки, которые соответствуют регулярному выражению;
<code bash>
a='Hello world'
b=`expr match "$a" '[A-Za-z ]*world'`
echo $b # 11
</code>
  * ''expr match строка \(регулярноеВыражение\)'' - получение искомой подстроки по регулярному выражению;
<code bash>
a='Hello world'
b=`expr match "$a" '.\+ \([a-z]\+\)'`
echo $b # world
</code>
  * ''${строка#подстрока}'' - удаление самой короткой подстроки (шаблона) в строке;
<code bash>
str=abcABC123ABCabc
#   |----|
echo ${stringZ#a*C} # 123ABCabc
</code>
  * ''${строка##подстрока}'' - удаление самой длинной подстроки (шаблона) в строке;
<code bash>
str=abcABC123ABCabc
#   |----------|
echo ${stringZ##a*C} # abc
</code>
  * ''${строка%подстрока}'' - удаление самой короткой подстроки (шаблона) в строке (поиск с конца строки);
  * ''<nowiki>${строка%%подстрока}</nowiki>'' - удаление самой длинной подстроки (шаблона) в строке (поиск с конца строки);
  * ''${строка/подстрока/замена}'' - замена первого вхождения подстроки в строке;
  * ''${строка/%подстрока/замена}'' - замена последнего вхождения подстроки в строке;
  * ''${%%строка//подстрока/замена%%}'' - замена всех вхождений подстроки в строкe.
