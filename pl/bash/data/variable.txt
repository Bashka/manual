====== Объявление и использование ======
Переменные объявляются вместе с их инициализацией. Неинициализированная переменная содержит пустую строку.
<code bash>
myVar='value'
</code>
В качестве имени переменной может выступать любая последовательность латинских букв, цифр и знака подчеркивания, начинающаяся с буквы или знака подчеркивания. Регистр в именах переменных учитывается.

Для получения значения переменной используется знак доллара (''$''), при этом переменная заменяется на хранимое в ней значение.
<code bash>
echo $myVar
echo ${myVar} # Эквивалентно
</code>
Важно помнить, что после замены переменной значением могут возникать непредвиденные ситуации вида:
<code bash>
myVar='Hello world'
expr length $myVar 'w' # expr index Hello world 'w'
</code>
Как видно при раскрытии переменной, результирующая строка будет использована в качестве двух первых параметров, а не одного, как ожидалось. Для решения этой проблемы достаточно обрамлять переменную двойными кавычками:
<code bash>
myVar='Hello world'
expr length "$myVar" 'w' # expr index 'Hello world' 'w'
</code>

====== Операции ======
  * ''%%set -- параметры%%'' - задать (переопределить) параметры утилиты или функции;
  * ''unset переменная'' - удалить переменную (записать в нее null);
  * ''export переменная'' - сделать переменную доступной дочерним процессам;
  * ''readonly переменная'' - сделать переменную константой;
  * ''declare -i переменная'' - объявить переменную целочисленной;
<code bash>
a=2
b=0
declare -i a
declare -i b
b=a*4
echo $b # 8
</code>
  * ''${переменная-поУмолчанию}'' - если переменная отсутствует, используется значение по умолчанию;
<code bash>
echo ${content-`cat $1`}
</code>
  * ''${переменная+значение}'' - если переменная имеет какое либо значение, то используется указанное значение, иначе пустая строка;
  * ''${переменная?ошибка}'' - если переменная отсутствует, выводится сообщение об ошибке, иначе значение переменной.

====== Косвенные ссылки ======
Если первая переменная хранит имя второй переменной, то можно получить значение второй переменной из первой с помощью следующей записи:
<code bash>
a='b'
b='Hello'
eval c=\$$a # Аналогично eval 'c=${'$a'}'
echo $c # Hello
</code>

====== Предопределенные переменные ======
Во время работы процесса Bash определяет следующие переменные:
  * ''$0'' - имя утилиты (нет в функциях);
  * ''$номер'' - значение параметра под указанным номером (первый параметр имеет номер 1);
  * ''$#'' - количество параметров, переданных утилите или функции;
  * ''$*'' - все параметры утилиты или функции в виде строки;
  * ''$@'' - аналогично ''$*'', но каждый параметр представлен в виде отдельной строки (аналогично ''"$1""$2"...'');
  * ''$?'' - код завершения последнего выполненного процесса;
  * ''$$'' - идентификатор текущего процесса;
  * ''$!'' - идентификатор последнего запущенного асинхронного процесса;
  * ''$_'' - последний параметр последней команды;
<code bash>
echo Hello world
echo $_ # world
du
echo $_ # du
</code>
