====== Вызов ======
Внешняя утилита это любой исполняемый файл, который вызывается по имени, а поиск его осуществляется по адресам, перечисленным в переменной ''PATH''.
<code bash>
ls
</code>

При вызове внешней утилите можно передать параметры, перечислив их после имени:
<code bash>
find ~/ -name test
</code>

====== Контекст вызова ======
Внешние утилиты вызываются в дочернем процессе. Это означает, что все переменные, объявленные при работе внешней утилиты скрыты для текущего процесса.
<code bash>
#otherScript.sh
var='Hello world'
</code>
<code bash>
var='Goodbye world'
./otherScript.sh
echo $var # Goodbye world
</code>

Команда ''source'' (или ее псевдоним ''.'') позволяет вызвать внешнюю утилиту в текущем процессе:
<code bash>
#mainScript.sh
var='Goodbye world'
source ./otherScript.sh # Аналог: . ./otherScript.sh
echo $var # Hello world
</code>

====== Последовательный вызов ======
Внешние утилиты могут вызываться последовательно с помощью следующих разделителей:
  * ''команда; команда'' - последовательное выполнение команд;
  * ''команда && команда'' - выполнение второй команды в случае успешного выполнения первой;
  * ''команда || команда'' - выполнение второй команды в случае невыполнения первой;
  * ''команда &'' - выполнение команды в фоновом режиме (при этом будет возвращен идентификатор процесса, выполняющего команду, который можно получить из переменной ''$!'');
  * ''команда & команда'' - одновременное выполнение двух команд.

====== Параметры ======
Доступ к параметрам внешних утилит осуществляется с помощью специальных [[..:data:variable#Предопределенные переменные|переменных]] Bash. 

Для работы с параметрами внешних утилит так же могут применяться следующие команды:
  * ''shift число'' - удаление первого (или указанного числа) параметра и сдвиг оставшихся параметров "влево";
<code bash>
# Итерация по параметрам утилиты.
while [ -n $1 ]; do
  echo $1
  shift
done
</code>
  * ''getopts шаблон переменная'' - заполнение переменной текущей опцией с учетом шаблона. Двоеточие перед шаблоном подавляет вывод ошибок. Двоеточие после шаблона опции означает, что опция может иметь значение;
<code bash>
# Ожидаются опции -a, -b со значением, -c и -d.
while getopts :ab:cd opt; do # Переменная opo принимает имя опции.
  case "$opt" in
  a) echo "Found the -a option"
    ;;
  b) echo "Found the -b option, with value $OPTARG" # Переменная OPTARG принимает значение опции.
    ;;
  c) echo "Found the -c option"
    ;;
  d) echo "Found the -d option"
    ;;
  *) echo "Unknown option: $opt"
    ;;
  esac
done

# Работа с оставшимися параметрами (не опциями).

# Пропуск опций.
shift $(( $OPTIND - 1 )) # Переменная OPTIND хранит номер последней обработанной опции.

for param in "$@"; do
  echo "Parameter: $param"
done
</code>

===== Стандартные параметры =====
Внешние утилиты часто используют следующие стандартные параметры:
^Параметр^Описание^
|-a|Показать все объекты|
|-c|Подсчитать количество|
|-d|Задать каталог|
|-e|Развернуть объект|
|-f|Указать файл, предназначенный для чтения данных из него|
|-h|Отобразить справочное сообщение, относящееся к данной команде|
|-i|Игнорировать регистр буквенных символов|
|-l|Сформировать вывод в версии с длинным форматом|
|-n|Использовать неинтерактивный (пакетный) режим|
|-o|Указать выходной файл, в который должен быть перенаправлен весь вывод|
|-q|Выполнять работу в режиме без вывода сообщений|
|-r|Обрабатывать каталоги и файлы рекурсивно|
|-s|Выполнять работу в режиме без вывода сообщений|
|-v|Формировать подробный вывод|
|-x|Исключить некоторый объект|
|-y|Подразумевать положительные ответы на все вопросы|

====== Возвращаемое значение ======
Внешние утилиты (сценарии Bash) возвращают целочисленное, положительное число, меньшее 255, обозначающее результат вычислений. Если это число равно нулю, то утилита завершила работу без ошибок, иначе возвращается положительное число, определяющее тип ошибки.

По умолчанию утилита возвращает значение, полученное из последней использованной команды. Если необходимо вернуть конкретное значение, используется утилита ''exit число'':
<code bash>
#!/bin/bash
...
exit 0
</code>

~~DISQUS~~
