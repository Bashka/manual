====== Класс ======
Класс ''Backbone.View'' реализует основную логику визуализации моделей и коллекций. Для создания собственного класса представления достаточно использовать метод ''Backbone.View.extend'':

<code javascript>
var TodoView = Backbone.View.extend({
  ...
});
</code>

Метод ''Backbone.View.extend'' наследуется создаваемым классом представления и может быть использован для последующего уточнения представления через наследование:

<code javascript>
var TestTodoView = TodoView.extend({
  ...
});
</code>

Для инстанциации класса представления используется операция ''new'', при этом экземпляр представления может быть инициализирован сразу же:

<code javascript>
var myView = new TodoView({
  model: myTask,
});
</code>

====== Объявление класса ======
При создании нового класса представления можно использовать следующие свойства и методы:

  * ''tagName'' - имя тега, используемого в качестве корневого элемента представления;
  * ''className'' - класс корневого элемента представления;
  * ''id'' - идентификатор корневого элемента представления;
  * ''events'' - словарь событий, ключами которого служат события и элементы их порадившие, а значениями - методы представления, вызываемые в качестве обработчиков;
<code javascript>
var TodoView = Backbone.View.extend({
  events: {
    'click .create-button': 'create',
    'click .delete-button': 'delete'
  },
  ...
});
</code>
  * ''template'' - функция-шаблонизатор представления;
  * ''initialize([object опции])'' - метод вызывается при инстанциации класса представления перед заполнением его свойств, которые передаются в качестве первого параметра;
  * ''render()'' - вызывается для создания DOM элементов представления в узле ''el'';

====== Методы ======
Экземпляры представления включают следующие методы:

  * ''setElement(node элемент)'' - сделать заданный элемент корневым для представления перенеся на него все обработчики событий с прежнего корневого элемента;
  * ''remove()'' - удаляет представления из документа и отключает все его обработчики событий;

====== Свойства ======
Экземпляры представления включают следующие свойства:

  * ''el'' - DOM узел, являющийся корнем представления;
  * ''$el'' - DOM узел, являющийся корнем представления, обернутый в JQuery;
  * ''$'' - функция аналогичная ''this.$el.find'', позволяющая получить дочерние узлы представления;
  * ''model'' - объект модели или коллекции моделей, отображаемый данным представлением;

====== События ======
Класс представления и его экземпляры включают методы миксина [[.:events|Backbone.Events]], что позволяет устанавливать обработчики событий и выбрасывать собственные события.

====== Пример ======
<code javascript>
var TodoView = Backbone.View.extend({
  tagName: 'li',
  template: _.template($('todo-template').html()),
  events: {
    'click .complete': 'complete'
  },

  initialize: function(attr){
    this.listenTo(this.model, 'change', this.render);
  },
  
  render: function(){
    this.$el.html(this.template(this.model.toJSON()));
    return this;
  },

  complete: function(){
    this.model.complete();
  }
});

var tasksView = new TodoView({model: myTask});
$('#tasks-ul').append(tasksView.render().$el);
</code>

~~DISQUS~~
