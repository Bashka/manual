====== Класс ======
Класс ''Backbone.Model'' реализует основную логику хранения и изменения атрибутов моделей. Для создания собственного класса модели достаточно использовать метод ''Backbone.Model.extend'':

<code javascript>
var Todo = Backbone.Model.extend({
  ...
});
</code>

Метод ''Backbone.Model.extend'' наследуется создаваемым классом модели и может быть использован для последующего уточнения модели через наследование:

<code javascript>
var TestTodo = Todo.extend({
  ...
});
</code>

Для инстанциации класса модели используется операция ''new'', при этом экземпляр модели может быть инициализирован сразу же:

<code javascript>
var myTask = new Todo({
  title: 'Купить молока'
});
</code>

====== Объявление класса ======
При создании нового класса модели можно использовать следующие свойства и методы:

  * ''defaults'' - словарь или функция, возвращающая словарь, определяющий начальные значения свойств экземпляра модели;
<code javascript>
var Todo = Backbone.Model.extend({
  defaults: {
    title: 'Задача на сегодня'
  },
  ...
});
</code>
  * ''url'' - URL адрес сервиса, используемый для запросов RESTful JSON;
  * ''initialize(object свойства, [object опции])'' - метод вызывается при инстанциации класса модели сразу после инициализации экземпляра;
<code javascript>
var Todo = Backbone.Model.extend({
  initialize: function(attr, options){
    console.log('Задача создана. Сегодня необходимо ' + this.get('title'));
  },
  ...
});
</code>
  * ''validate(object свойства)'' - метод вызывается при вызове метода ''save'' экземпляров модели или метода ''set'' с опцией ''validate: true'' и служит для валидации его состояния. Если валидация неудачна, состояние модели не изменяется, но выбрасывается событие ''invalid'';
<code javascript>
var Todo = Backbone.Model.extend({
  validate: function(attr){
    if(attr.title === undefined || attr.title === ''){
      return 'Необходимо указать задачу';
    }
  },
  ...
});
</code>

====== Методы ======
Экземпляры модели включают следующие методы:

  * ''set(string свойство, значение, [object опции])'' - метод устанавливает значение свойству;
  * ''get(string свойство)'' - метод возвращает значение свойства;
  * ''has(string свойство)'' - определяет установлено ли ствойство;
  * ''unset(string свойство, [object опции])'' - удаляет свойство;
  * ''escape(string свойство)'' - метод возвращает значение свойства в котором все HTML-значимые символы заменены на безопасные;
  * ''clear([object опции])'' - удаляет все свойства, в том числе ''id'';
  * ''toJSON()'' - объект, содержащий только свойства экземпляра модели;
  * ''isValid()'' - выполняет валидацию и возвращает ''true'', если экземпляр модели валиден;
  * ''clone()'' - возвращает копию экземпляра модели с идентичными свойствами;
  * ''sort()'' - выполнить пересортировку коллекции;
  * ''isNew()'' - была ли модель сохранена на сервере (установлено ли свойство ''id'' модели);
  * ''save()'' - сохранение модели (HTTP методом ''PUT'' по адресу '':url/:id'') или создание новой (если метод ''isNew'' возвращает ''true'') модели (HTTP методом ''POST'' по адресу '':url'' который должен вернуть созданный JSON объект модели) с помощью метода ''sync'';
  * ''fetch()'' - восстановление модели (если метод ''isNew'' возвращает ''false'') с помощью метода ''sync'' (HTTP методом ''GET'' по адресу ''url/id'' который должен вернуть JSON объект модели);
  * ''destroy()'' - удаление модели (если метод ''isNew'' возвращает ''false'') с помощью метода ''sync'' (HTTP методом ''DELETE'' по адресу '':url/:id'') и из коллекции, в которую она добавлна;

====== Свойства ======
Экземпляры модели включают следующие свойства:

  * ''id'' - идентификатор сущности на стороне сервера, которую представляет данный экземпляр модели. Это свойство может быть не установлено, если сущность еще не была сохранена;
  * ''cid'' - идентификатор экземпляра модели, устанавливаемый библиотекой ''Backbone'';
  * ''collection'' - коллекция в которую добавлена модель. Вызов метода ''destroy'' приводит к удалению модели из коллекции и обнулению этого свойства;

====== События ======
Класс модели и его экземпляры включают методы миксина [[.:events|Backbone.Events]], что позволяет устанавливать обработчики событий и выбрасывать собственные события.

Экземпляры модели могут выбрасывать следующие стандартные события:

  * ''change (модель, опции)'' - изменение свойства модели;
  * ''change:свойство (модель, значение, опции)'' - изменение конкретного свойства модели;
<code javascript>
obj.on('change:x', function(model, value, options){
  console.log(model); // obj
  console.log(value); // 2
  console.log(options); // {}
});
obj.set('x', 2);
</code>
  * ''destroy (модель, опции)'' - уничтожение модели;
  * ''request (модель, xhr, опции)'' - запрос на сервер от модели;
  * ''sync (модель, ответ, опции)'' - успешная синхронизация модели с сервером;
  * ''error (модель, xhr, опции)'' - ошибка синхронизации модели с сервером;
  * ''invalid (модель, ошибка, опции)'' - ошибка валидации модели;

====== Пример ======
<code javascript>
var Todo = Backbone.Model.extend({
  defaults: {
    title: 'No name',
    complete: false
  },

  validate: function(attr){
    if(attr.title === undefined || attr.title === ''){
      return 'Поле title не должно быть пустым';
    }

    if((typeof attr.complete) !== 'boolean'){
      return 'Поле complete должно иметь логический тип';
    }
  },

  complete: function(){
    this.set('complete', true);
  }
});

var myFirstTask = new Todo({
  title: 'Купить молока'
});
</code>

~~DISQUS~~
