====== Класс ======
Класс ''Backbone.Collection'' реализует основную логику хранения и изменения коллекций экземпляров модели. Для создания собственного класса коллекции используется метод ''Backbone.Collection.extend'':

<code javascript>
var TodoCollection = Backbone.Collection.extend({
  ...
});
</code>

Для инстанциации класса коллекции используется операция ''new'', при этом коллекцию можно инициализировать с помощью массива:

<code javascript>
var myCollection = new TodoCollection([
  new Todo(),
  new Todo(),
  new Todo()
]);
</code>

====== Объявление класса ======
При создании нового класса коллекции можно использовать следующие свойства и методы:

  * ''model'' - свойство хранит конструктор класса модели, который используется для инстанциации ее экземпляров при добавлении "сырых" данных в коллекцию;
<code javascript>
var TodoCollection = Backbone.Collection.extend({
  model: Todo,
  ...
});

var myCollection = new TodoCollection([
  {title: 'Купить молоко'},
  {title: 'Законочить проект'},
]);
</code>
  * ''initialize([array модели], [object опции])'' - метод вызывается при инстанциации класса коллекции сразу после инициализации экземпляра;

====== Методы ======
Экземпляры коллекций включают следующие методы:

  * ''at(int индекс)'' - получить модель из коллекции по индексу (свойству ''id'') или по порядку добавления;
  * ''get(int id)'' - получить модель из коллекции по ''id'' или ''cid'';
  * ''add(array модели, [object опции])'' - добавление в коллекцию новых моделей. Если передать в качестве опции ''merge: true'', то при наличии в коллекции моделей, идентичных добавляемым, они будут обновлены;
  * ''remove(array модели, [object опции])'' - удаляет из коллекции модели;
  * ''push(object модель, [object опции])'' - добавляет в конец коллекции новую модель;
  * ''pop([object опции])'' - выталкивает с вершины коллекции модель;
  * ''unshift(object модель, [object опции])'' - добавляет в начало коллекции новую модель;
  * ''shift([object опции])'' - выталкивает с начала коллекции модель;
  * ''set(array модели, [object опции])'' - приводит коллекцию к состоянию, определенному первым параметром;
<code javascript>
var coll = new Backbone.Collection(['a', 'b']);
coll.set(['a', 'c']); // a - обновление, b - удаление, c - добавление
</code>
  * ''reset(array модели, [object опции])'' - приводит коллекцию к состоянию, определенному первым параметром, но в отличии от метода ''set'', не выполняется удаление, обновление и добавление моделей коллекции;
  * ''toJSON()'' - массив, содержащий объекты со свойствами всех моделей коллекции;
  * ''clone()'' - возвращает копию экземпляра коллекции с идентичным содержимым;

====== Свойства ======
Экземпляры коллекций включают следующие свойства:

  * ''length'' - число моделей, содержащихся в коллекции;

====== События ======
Класс коллекции и его экземпляры включают методы миксина [[.:events|Backbone.Events]], что позволяет устанавливать обработчики событий и выбрасывать собственные события.

Экземпляры коллекций могут выбрасывать следующие стандартные события:

  * ''add (модель, коллекция, опции)'' - добавление модели в коллекцию;
  * ''remove (модель, коллекция, опции)'' - удаление модели из коллекции;
  * ''reset (коллекция, опции)'' - замена содержимого коллекции;
  * ''sort (коллекция, опции)'' - сортировка коллекции;

~~DISQUS~~
