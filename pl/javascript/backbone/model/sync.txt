====== Синхронизация модели ======
Экземпляры модели могут быть связаны с бизнес-логикой приложения на стороне сервера. Для этого используется RESTful API и асинхронные запросы для синхронизации модели представления и сервера. Для указания целевого URL адреса, с которым должны взаимодействовать экземпляры модели для синхронизации используется свойство ''urlRoot'', значением которого может быть строка или функция. Если же это свойство не указано, URL адрес вычисляется из свойства ''collection.url'' экземпляра модели.

<code javascript>
var User = Backbone.Model.extend({
  urlRoot: '/users.php'
  ...
});
</code>

Для синхронизации экземпляра модели с сервером используются следующие методы:

^ Метод           ^ isNew     ^ Адрес                ^ Тело           ^ Ответ ^ Описание ^
| ''fetch(opts)'' | ''true''  | GET ''/:url/:id''    |                | JSON  | Получение состояния объекта |
| ''save()''      | ''false'' | POST ''/:url''       | ''attributes'' | JSON  | Создание нового объекта |
|                 | ''true''  | PUT ''/:url/:id''    | ''attributes'' | JSON  | Обновление объекта |
| ''destroy()''   | ''true''  | DELETE ''/:url/:id'' |                |       | Удаление объекта |

Все эти методы зависят от связи экземпляра модели с объектом на сервере через свойство ''id'', наличие которого проверяется методом ''isNew()''. Этот метод возвращает ''true'', если данное свойство содержит значение.

<code javascript>
var currentUser = new User;
currentUser.fetch({
  success: function(){
    console.log(currentUser.get('id'));

    currentUser.set('login', 'new login');
    currentUser.save({
      success: function(){
        currentUser.destroy();
      }
    });
  }
});
</code>

====== Параметризация запроса ======
Для метода ''fetch'', в качестве опций вызова можно указать свойство ''data'', которое будет использовано для параметризации запроса:

<code javascript>
var currentUser = new User;
currentUser.fetch({
  data: {type: 'current'} // Адрес запроса: GET /:url/:id?type=current
});
</code>

====== Парсинг ответа ======
По умолчанию идентификатор объекта, связанного с экземпляром модели, хранится в свойстве ''id''. Если это не так, можно указать правильное имя с помощью свойства ''idAttribute'':

<code javascript>
var User = Backbone.Model.extend({
  idAttribute: '_id',
  ...
});
</code>

Методы ''fetch'' и ''save'' ожидают получить от сервера состояние объекта, которое будет установлено вызываемому экземпляру модели в качестве текущего (синхронизированного). Более гибким решением, является использование метода ''parse(ответ, [опции])'', переопределение которого позволяет подготовить ответ сервера перед тем, как он будет сохранен в виде состояния модели:

<code javascript>
var User = Backbone.Model.extend({
  parse: function(res){
    return {
      id: res._id,
      login: res.name
    };
  },
  ...
});
</code>

~~DISQUS~~
