====== Синхронизация коллекции ======
Содержимое коллекции может быть связано с бизнес-логикой приложения на стороне сервера. Для этого используется RESTful API и асинхронные запросы для синхронизации моделей коллекции и сервера. Для указания целевого URL адреса, с которым должны должна взаимодействовать коллекция для синхронизации используется свойство ''url'', значение которого может быть строкой или функцией. Это свойство так же будет использовано в качестве целевого адреса для синхронизации моделей коллекции, если для них не указано свойство ''urlRoot''.

<code javascript>
var Users = Backbone.Collection.extend({
  url: '/users.php',
  ...
});
</code>

Для синхронизации коллекции с сервером используются следующие методы:


^ Метод             ^ Адрес                ^ Тело           ^ Ответ ^ Описание ^
| ''fetch(opts)''   | GET ''/:url''        |                | JSON  | Получение массива объектов |
| ''create(attrs)'' | POST ''/:url''       | ''attributes'' | JSON  | Создание нового объекта |

<code javascript>
var users = new Users;
users.fetch();
users.create({
  login: 'new user'
});
</code>

====== Параметризация запроса ======
Для метода ''fetch'', в качестве опций вызова можно указать свойство ''data'', которое будет использовано для параметризации запроса:

<code javascript>
var users = new Users;
users.fetch({
  data: {type: 'active'} // Адрес запроса: GET /:url?type=current
});
</code>

====== Парсинг ответа ======
Методы ''fetch'' и ''create'' ожидают получить от сервера массив состояний объектов (состояние объекта), которое будет установлено в качестве содержимого коллекции (синхронизированно). Более гибким решением, является использование метода ''parse(ответ, [опции])'', переопределение которого позволяет подготовить ответ сервера перед тем, как он будет сохранен в виде состояния коллекции:

<code javascript>
var Users = Backbone.Collection.extend({
  parse: function(res){
    var result = [];
    for(var i in res){
      result.push({
        id: res[i]._id,
        login: res[i].name
      });
    }

    return result;
  },
  ...
});
</code>

~~DISQUS~~
