====== Объявление и инициализация коллекций ======
Для объявления коллекции используется базовый класс ''Backbone.Collection'', который необходимо расширить с помощью метода ''extend'' логикой создаваемой коллекции:

<code javascript>
var Users = Backbone.Collection.extend({
  ...
});
</code>

Инстанциация коллекции реализуется с помощью оператора ''new'':

<code javascript>
var users = new Users;
</code>

Конструктор коллекции по умолчанию принимает два аргумента:

  * Массив моделей, которые будут входить в коллекцию
  * Опции коллекции
    * ''comparator'' - функция-компаратор

<code javascript>
var users = new Users([
  {login: 'foo'},
  {login: 'bar'}
]);
console.log(users.at(0).get('login')); // 'foo'
</code>

<code javascript>
var users = new Users([
  new User,
  new User
]);
</code>

Если необходимо дополнительно инициализировать экземпляр коллекции, можно определить метод ''initialize'', который будет вызван после конструктора:

<code javascript>
var Users = Backbone.Collection.extend({
  initialize: function(models, options){
    ...
  },

  ...
});
</code>

Если необходимо определить конкретный класс модели, экземпляры которого будут хранится в коллекции, используется свойство ''model''. При этом этот класс будет использован как базовый при инстанциации коллекции массивом (по умолчанию используется класс ''Backbone.Model''):

<code javascript>
var Users = Backbone.Collection.extend({
  model: User,

  ...
});

var users = new Users([
  {login: 'foo'},
  {login: 'bar'}
]);

console.log(users.at(0) instanceof User); // true
</code>

====== Функция-компаратор ======
Компаратор это функция, позволяющая держать коллекцию в отсортированном состоянии. Функция-компаратор указывается в свойстве ''comparator'' и может принимать один или два аргумента, являющихся моделями. В первом случае функция должна возвращать значение, а сортировка будет выполняться автоматически с использованием этого значения. Во втором случае, функция должна возвращать -1 - если первая модель должна идти перед второй, 0 - если модели равны и 1 - если первая модель должна идти после второй.

<code javascript>
var Users = Backbone.Collection.extend({
  comparator: function(user){
    return model.get('login');
  },
  ...
});
</code>

<code javascript>
var Users = Backbone.Collection.extend({
  comparator: function(userA, userB){
    return userA.get(id) - userB.get(id);
  },
  ...
});
</code>

Важно помнить, что изменение свойства модели, по которому выполняется сортировка, не приводит к автоматической сортировки коллекции, в которую входит модель. Для этого необходимо вызвать метод ''sort'' коллекции.

~~DISQUS~~
