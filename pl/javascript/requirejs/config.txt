====== Глобальная конфигурация ======
Конфигурируется RequireJS с помощью функции ''requirejs.config''. Она принимает словарь со следующими разделами:

  * ''baseUrl'' - адрес каталога, используемого по умолчанию при загрузке модулей. Адрес указывается относительно корня проекта (''/'') и не должен содержать начального и конечного слешей;
  * ''paths'' - псевдонимы каталогов проекта и подключаемых модулей. В качестве ключей этого словаря выступают псевдонимы, а в качестве значений - адреса каталогов и модулей относительно адреса, заданного в разделе ''baseUrl'';
  * ''shim'' - описания модулей, структура которых не позволяет получить их характеристики автоматически. В качестве ключей этого словаря выступают имена модулей, а в качестве значений - следующие свойства:
    * ''deps'' - массив имен модулей, от которых зависит данный модуль. При подключении модуля с объявленными зависимостями, они будут подключены автоматически;
    * ''exports'' - имя переменной, экспортируемое в глобальное пространство имен модулем.
  * ''callback'' - функция, которая будет вызвана сразу после загрузки RequireJS. Функция используется совместно с разделом ''deps'';
  * ''deps'' - массив зависимостей, подключаемых перед вызовом функции раздела ''callback'' и передаваемых ей в качестве параметров;
  * ''config'' - словарь конфигурации модулей, ключами которого являются имена модулей, а значениями - объекты, передаваемые в качестве конфигурации.
<code javascript>
requirejs.config({
  config: {
    'app/module': {
      title: 'Test'
    }
  }
});

requirejs(function(require, exports, module){
  console.log(module.config().title);
});

requirejs(['module'], function(module){
  console.log(module.config().title);
});
</code>

====== Локальная конфигурация ======
Если необходимо реализовать несколько RequireJS загрузчиков с различными конфигурациями, используется функция ''requirejs.config'', возвращающая сконфигурированный загрузчик:

<code javascript>
var localRequire = requirejs.config({
  baseUrl: 'script/lib'
});

localRequire([...], function(...){
  ...
});
</code>

====== Пример ======
Структура проекта (данная структура и конфигурация используется для всех примеров этого справочника):
<code>
scripts/
  lib/
    underscore.js
    backbone.js
    jquery.js
  app/
    Task.js
    ...
  main.js
</code>

<file javascript main.js>
requirejs.config({
  baseUrl: 'scripts/lib', // По умолчанию модули загружаются из каталога scripts/lib.
  paths: {
    app: '../app', // Модули проекта находятся по адресу scripts/app. Этот путь позволяет сократить их имена приставкой app.
  },
  shim: {
    backbone: {
      deps: ['underscore', 'jquery'], // Библиотека Backbone зависит от Underscore и JQuery.
      exports: 'Backbone' // Она экспортирует переменную Backbone.
    },
    underscore: {
      exports: '_'
    }
  },
  deps: ['backbone', 'app/Task'],
  callback: function(bb, Task){
    /*
    Подключенный класс из файла app/Task.js теперь доступен в переменной Task,
    а библиотека Backbone экспортирована в глобальное пространство имен как Backbone.
    */
  }
});
</file>

~~DISQUS~~
