===== composer.json =====

Файл ''composer.json'' содержит описание текущего проекта и его зависимости для Composer. Данный файл содержит информацию в формате Json.

Сформировать данный файл можно самостоятельно или используя следующую команду:

<code bash>
php composer.phar init
</code>

Команда запросит некоторую информацию о проекте и сформирует файл `composer.json`.

====== Описание проекта ======

Для описания текущего проекта используется корневой элемент в файле ''composer.json''. Здесь могут быть указаны следующие свойства:

  * name - имя проекта, которое включает имя постовщика и собствнно имя проекта, разделенных слешем (на пример orgname/myProj);
  * description - описание проекта;
  * version - версия проекта с учетом мажорной, минорной версии и номера патча (на пример 2.1.7-beta2);
  * type - тип проекта. Допустимы следующие значения:
    * library - библиотека;
    * project - проект;
    * metapackage - метапакет, описывающий зависимости;
    * composer-plugin - плагин самого Composer.
  * homepage - URL адрес домашней страницы проекта;
  * time - дата последнего релиза проекта в формате YYYY-MM-DD или YYYY-MM-DD HH:MM:SS;
  * license - лицензия (или список лицензий в виде массива), под которой распространяется проект. Для открытых проектов рекомендуется использовать одно из следующих значений: Apache-2.0, BSD-2-Clause, BSD-3-Clause, BSD-4-Clause, GPL-2.0, GPL-2.0+, GPL-3.0, GPL-3.0+, LGPL-2.1, LGPL-2.1+, LGPL-3.0, LGPL-3.0+, MIT;
  * authors - список (в виде массива) авторов проекта. Каждый элемент списка представляется объектом, который может содержать следующие свойства:
    * name - имя;
    * email - электронный адрес;
    * homepage - домашняя страница;
    * role - роль в проекте.
  * support - информация о поддержке пользователей проекта. Данный объект может иметь следующие свойства:
    * email - электронный адрес поддержки;
    * issues - URL Issue Tracker;
    * forum - форум поддержки;
    * wiki - wiki поддержки;
    * irc - IRC канал поддержки;
    * source - URL адрес, содержащий исходные коды проекта.

<code javascript>
{
  "name": "orgname/myProj",
  "description": "test proj",
  "version": "1.0.2",
  "type": "project",
  "license": "GPL-3.0",
  "homepage": "http://orgname.com",
  "authors": [
      {
          "name": "myname",
          "email": "myname@mail.com",
          "homepage": "http://orgname.com"
      }
  ],
  "support": {
    "forum": "orgname.com/forum"
  },
  ...
}
</code>

====== Зависимости ======

Для объявления зависимостей текущего проекта используется свойство ''require'', которое описывает зависимости в виде ассоциативного массива. Ключами этого массива являются имена используемых пакетов в виде ''издатель/имя пакета'', а значениями требуемые версии этих пакетов.

<code javascript>
{
  ...
  "require": {
    "monolog/monolog": "1.0.*@beta",
    "orgname/myproj": ">1.0.0,<1.0.2",
    "acme/foo": "@dev"
  }
}
</code>

Версия используемого пакета может быть задана жестко, в виде конкретного значения, либо в виде допустимого диапазона с помощью следующих символов:

  * %%> >= < <= !=%% - больше, меньше указанной версии, либо любая версия кроме заданной;
  * >, < - больше одной, но ниже другой версии;
  * > | < - больше одной или ниже другой версии;
  * 1.* - любая из минорных версий;
  * dev-ветка#коммит - версия, заданная данным комитом указанной ветки.

==== dev-зависимости ====

Dev-зависимости это библиотеки и утилиты, используемые в процессе разработки на локальной машине (на пример PHPUnit). Они объявляются аналогично обычным зависимостям проекта, но в директиве require-dev.

<code javascript>
{
  ...
  "require-dev": {
    "phpunit/phpunit": "3.7.*"
  }
}
</code>

Команда ''install'' установит все зависимости, а комагда ''install --no-dev'' только прямые зависимости, но не dev-зависимости.

==== Пакеты Composer ====

Пакет (допустимой зависимостью) для Composer может имееть следующий формат:

  * [[https://packagist.org|Packagis]]
  * Системы контроля версий;
  * PHP файл;
  * ZIP архив;
  * PEAR;
  * Satis.

===== Репозитории =====

Если некоторый пакет отсутствует в Packagis, но имеется, на пример, в Git репозитории, то его можно установить с помощью Composer объявив репозиторий, по которому можо найти этот пакет. Делается это с помощью свойства ''repositories'', содержащего массив объектов, описывающих репозитории. Каждый такой объект может содержать следующие свойства:

  * type - тип репозитория (на пример package - определенный пакет);
  * package - пакет, который может быть получен из этого репозитория. Это свойство представлено объектом, который в свою очередь содержит следующие свойства:
    * name - имя пакета;
    * version - версия пакета;
    * source - описание места, из которого можно получить исходные коды пакета. Описание осуществляется с помощью следующих свойств:
      * type - тип места (на пример git или zip);
      * url - URL адрес пакета;
      * reference - ссылка на пакет (для git репозитория это хеш или имя ветки).
    * dist - описание мета, из которых можно получить пакет (как правило это архивы пакета). Описание осуществляется с помощью тех же свойсвт, что и свойство ''source'', но без ''reference'';
    * autoload - информация для автозагрузки классов пакета.

<code javascript>
{
...
  "repositories": [
    {
      "type": "package",
      "package": {
        "name": "heartcode/CanvasLoader",
        "version": "1.2.3",
        "source": {
          "type": "git",
          "url": "http://github.com/heartcode/CanvasLoader",
          "reference": "master"
        },
        "dist": {
          "type": "tar",
          "url": "file:///home/user/packages/myPack-1.0.tar"
        },
        "autoload": {
          "classmap": ["src/"]
        }
      }
    },
    ...
  ],
}
</code>

~~DISQUS~~
