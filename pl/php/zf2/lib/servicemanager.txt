[[:start|Главная]] > [[:ЯП:ZF2|Zend Framework 2]] > Компоненты фреймворка > **ServiceManager**

===== Локатор служб =====

Класс [[http://framework.zend.com/manual/current/en/modules/zend.service-manager.intro.html|ServiceManager]] реализует паттерн "Локатор служб" и предоставляет доступ к имеющимся службам проекта. Класс включает два основных метода для доступа к службам:

  * get - запрос службы;
  * has - проверка наличия службы.

<code php>
$sm = new Zend\ServiceManager\ServiceManager;
echo $sm->has('my_service'); // false
$sm->setService('my_service', new MyClass);
echo $sm->has('my_service'); // true
$service = $sm->get('my_service');
</code>

Помимо методов доступа к сервисам, класс реализует несколько методов регистрации сервисов в локаторе.

==== setService ====

Метод ''setService'' позволяет зарегистрировать в качестве сервиса любые данные, будь то объект, массив или другой базовый тип PHP.

<code php>
$sm->setService('my_config', [1, 2, 3]);
</code>

==== setInvokableClass ====

Метод ''setInvokableClass'' позволяет зарегистрировать в качестве сервиса класс, объекты которого будут являться службами. Особенностью данного метода является реализация "ленивой загрузки", позволяющей создавать службу (объект класса службы) по первому требованию.

<code php>
$sm->setInvokableClass('my_service', 'MyClass', false);
</code>

Третий параметр метода определяет, является ли служба разделяемой. Если данный параметр установлен в false, то при каждом запросе службы будет создаваться новый объект, в противном же случае, будет использоваться один и тот же объект службы.

==== setFactory ====

Метод ''setFactory'' позволяет загеристрировать фабрику, создающую объект службы. Делается это двумя способами:

  * Регистрация в качестве фабрики анонимной функции;
  * Регистрация класса, реализующего интерфейс ''Zend\ServiceManager\FactoryInterface''.

<code php>
$sm->setFactory('my_service', function(){
  return new MyClass;
}, true);
</code>

<code php>
class MyFactory implements Zend\ServiceManager\FactoryInterface{
    public function createService(Zend\ServiceManager\ServiceLocatorInterface $serviceLocator){
        return new \stdClass();
    }
}
$sm->setFactory('my_service1', new MyFactory, false);
$sm->setFactory('my_service2', 'MyFactory', false);
</code>

Как и метод ''setInvokableClass'', данный метод принимает третий параметр, определяющий является ли данная служба разделяемой.

==== setAlias ====

Метод ''setAlias'' позволяет создать псевдоним для уже зарегистрированной службы.

<code php>
$sm->setService('my_service', new MyClass);
$sm->setAlias('alias_service', 'my_service');
</code>

==== addAbstractFactory ====

Метод ''addAbstractFactory'' позволяет определить не конкретный сервис, а группу сервисов, ориентируясь на их имена. Класс, зарегистрированный этим методом используется всякий раз, когда у локатора служб запрашивается сервис, не зарегистрированный в нем явно.

<code php>
class MyAbstractFactory implements Zend\ServiceManager\AbstractFactoryInterface{
    public function canCreateServiceWithName(Zend\ServiceManager\ServiceLocatorInterface $serviceLocator, $name, $requestedName){
        // Метод проверяет, подходит ли данный класс для генерации службы с данным именем
        // Здесь допустимыми службами являются 'foo' и 'bar'
        return $requestedName === 'foo' || $requestedName === 'bar';
    }

    public function createServiceWithName(Zend\ServiceManager\ServiceLocatorInterface $serviceLocator, $name, $requestedName){
        $service = new \stdClass();
        $service->name = $requestedName;
        return $service;
    }
}

$sm->addAbstractFactory('MyAbstractFactory');
echo $serviceManager->get('foo')->name; // foo
echo $serviceManager->get('bar')->name; // bar
echo $serviceManager->get('baz')->name; // exception! службы не существует
</code>

==== addInitializer ====

Метод ''addInitializer'' позволяет добавить инициализирующий службы класс. Данный класс вызывается при создании новой службы и инициализирует ее.

<code php>
class MyInitializer implements Zend\ServiceManager\InitializerInterface{
    public function initialize($instance, Zend\ServiceManager\ServiceLocatorInterface $serviceLocator){
        if($instance instanceof MyClass){
          $instance->initialized = 'initialized!';
        }
    }
}

$serviceManager->addInitializer('MyInitializer');
$serviceManager->setInvokableClass('my_service', 'MyClass');

echo $serviceManager->get('my-service')->initialized; // initialized
</code>

~~DISQUS~~
