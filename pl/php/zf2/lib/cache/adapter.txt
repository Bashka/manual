[[:start|Главная]] > [[:ЯП:ZF2|Zend Framework 2]] > Компоненты фреймворка > **CacheAdapter**

===== Создание объекта кэша =====

Для доступа к используемой системе кэширования необходимо создать [[http://framework.zend.com/manual/current/en/modules/zend.cache.storage.adapter.html|адаптер]] этой системы. Для этого используется три возможных подхода.

==== Инстанцирование класса адаптера ====

Данный способ подразумивает создание объекта адаптера программистом путем инстанцирования соответствующего класса.

<code php>
$cache  = new Zend\Cache\Storage\Adapter\Filesystem;
$cache->getOptions()->setCacheDir('./cache');
$cache->getOptions()->setTtl(3600);
</code>

==== Использование фабрики адаптера ====

Данный способ подразумивает использование метода ''adapterFactory'' класса ''StorageFactory'' для получения объекта кэша.

<code php>
$cache  = Zend\Cache\StorageFactory::adapterFactory('filesystem', [
  'cache_dir' => './cache', 
  'ttl' => 3600
]);
</code>

==== Использование фабрики кэша ====

Данный способ подразумивает использование метода ''factory'' класса ''StorageFactory'' для получения объекта кэша. Этот метод более сложный, нежели ''adapterFactory'', так как позволяет полностью настроить любой объект адаптера кэша.

<code php>
$cache = Zend\Cache\StorageFactory::factory([
  'adapter' => [
    'name'    => 'filesystem',
    'options' => [
      'cache_dir' => './cache',
      'ttl' => 3600,
    ],
  ],
  'plugins' => [
    'exception_handler' => array('throw_exceptions' => false),
  ],
]);
</code>

===== Конфигурирование адаптера =====

Каждый адаптер кэша может конфигурироваться специфичным образом, но следующие опции конфигурируют любой адаптер:

  * ttl - целое число, определяющее время жизни данных кэша. Если это число равно нулю, то данные "бессмертны";
  * namespace - префикс, добавляемый к ключам элементов кэша;
  * key_pattern - регулярное выражение, определяющее допустимое имя ключа;
  * readable - доступность кэша на чтение;
  * writable - доступность кэша на запись.

===== Методы адаптера =====

Так как адаптер служит для унификации интерфейса различных кэшей, этот класс включает следующие методы:

  * getItem - метод возвращает значение из кэша. В качестве второго параметра можно передать ссылку на переменную, в которую будет записал результат операции (true - если данные получены, иначе - false);
  * getItems - метод принимает массив ключей и возвращает соответствующий им ассоциативный массив значений из кэша;
  * hasItem - метод проверяет наличие ключа в кэше;
  * hasItems - метод проверяет наличие ключей в кэше из переданного массива;
  * getMetadata - метод возвращает характеристики ключа кэша;
  * getMetadataы - метод возвращает характеристики элементов кэша на основе массива ключей;
  * setItem - метод добавляет или изменяет значение в кэше;
  * setItems - метод добавляет или изменяет значения в кэше на основе ассоциативного массива;
  * touchItem - метод обновляет время регистрации элемента кэша продлевая его "жизнь";
  * touchItems - метод обновляет время регистрации элементов кэша продлевая их "жизнь" на основе массива ключей;
  * removeItem - метод удаляет элемент из кэша;
  * removeItems - метод удаляет элементы из кэша на основе массива ключей;
  * incrementItem - метод увеличивает значение элемента в кэше на единицу;
  * incrementItems - метод увеличивает значение элементов в кэше на единицу на основе массива ключей;
  * decrementItem - метод уменьшает значение элемента в кэше на единицу;
  * decrementItems - метод уменьшает значение элементов в кэше на единицу на основе массива ключей.

~~DISQUS~~
