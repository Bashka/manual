[[:start|Главная]] > [[:ЯП:ZF2|Zend Framework 2]] > Компоненты фреймворка > **TableGateway**

Класс [[http://framework.zend.com/manual/current/en/modules/zend.db.table-gateway.html|TableGateway]] реализует шаблон Active record для доступа к таблице БД.

<code php>
$projectTable = new Zend\Db\TableGateway\TableGateway('project', $adapter);
$rowset = $projectTable->select(['type' => 'PHP']);
</code>

===== Взаимодействие с таблицей =====

Класс реализует следующие основные методы:

  * select - запрос данных из таблицы;
  * selectWith - запрос данных из таблицы с использованием заданного SQL запроса;
  * insert - добавление данных в таблицу;
  * insertWith - добавление данных в таблицу с использованием заданного SQL запроса;
  * update - изменение данных в таблице;
  * updateWith - изменение данных в таблице с использованием заданного SQL запроса;
  * delete - удаление данных из таблицы;
  * deleteWith - удаление данных из таблицы с использованием заданного SQL запроса.

Методы, использующие заданные SQL запросы принимают объекты пакета [[ЯП:ZF2:lib:Db:Sql]].

==== Select ====

Для запроса данных из целевой таблицы используется метод ''select'', опционально принимающий в качестве первого параметра условие отбора в виде массива.

<code php>
$artistTable = new Zend\Db\TableGateway\TableGateway('artist', $adapter);
$rowset = $artistTable->select(['id' => 2]);
</code>

==== Insert ====

Для добавления данных в целевую таблицу используется метод ''insert'', принимающий в качестве первого параметра ассоциативный массив добавляемых данных.

<code php>
$artistTable = new Zend\Db\TableGateway\TableGateway('artist', $adapter);
$artistTable->insert(['name' => 'foo']);
</code>

==== Update ====

Для изменения данных в целевую таблице используется метод ''update'', принимающий в качестве первого параметра ассоциативный массив изменяемых данных, а в качестве второго, опционально, условие отбора.

<code php>
$artistTable = new Zend\Db\TableGateway\TableGateway('artist', $adapter);
$artistTable->update(['name' => 'foo'], ['id' => 1]);
</code>

==== Delete ====


Для удаления данных из целевой таблицы используется метод ''delete'', опционально принимающий в качестве первого параметра условие отбора.

<code php>
$artistTable = new Zend\Db\TableGateway\TableGateway('artist', $adapter);
$artistTable->delete(['id' => 1]);
</code>

===== Объектное представление результата =====

Класс ''TableGateway'' предоставляет удобный механизм объектного представления результата запроса, который позволяет вернуть PHP объекты (а не ассоциативные массивы) при выполнении запроса.

Для использования этого механизма необходимо:

  * Объявить класс сущности (Entity), объекты которого будут использоваться в качестве результата запроса;

<code php>
class Artist{
  private $id;
  private $name;

  // Метод отвечает за формирование объекта на основании массива данных
  public function exchangeArray($data){
    $this->id = $data['id'];
    $this->name = $data['name'];
  }
}
</code>

  * Создать прототип [[ЯП:ZF2:lib:Db:ResultSet]], передав ему объект класса сущности в качестве основы;

<code php>
$rs = new Zend\Db\ResultSet\ResultSet;
$rs->setArrayObjectPrototype(new Artist);
</code>

  * Создать объект класса ''TableGateway'' передав ему созданный прототип;

<code php>
$table = new Zend\Db\TableGateway\TableGateway('artist', $adapter, null, $rs);
</code>

  * Выполнить запрос данных, получив в результате ''ResultSet'' с объектами класса сущности.

<code php>
$result = $table->select();
</code>

~~DISQUS~~
