====== Семантика ======

===== WriterInterface =====

Интерфейс ''WriterInterface'' реализуется классами, ответственными за преобразование конфигурации в строку определенного формата с возможностью записи ее в файл.

  * ''toString'' - преобразует конфигурацию в строку
  * ''toFile'' - преобразует конфигурацию и записывает результат в файл

====== Реализация ======

===== AbstractWriter =====

Абстрактный класс ''AbstractWriter'' сводит семантику интерфейса ''WriterInterface'' к единственному абстрактному методу ''processConfig'', который должен быть реализован конкретным классом и отвечать за преобразование массива конфигурации в строку целевого формата.

<code php>
class PhpArrayWriter extends AbstractWriter{
  protected function processConfig(array $config){
    return '<?php' . "\n" .
      'return ' . var_export($config, true) . ';';
  }
}

$config = new Config([
  'core' => [
    'author' => 'zf2'
  ]
]);
echo (new PhpArrayWriter)->toString($config);
// <?php
// return array (
//   'core' => array (
//     'author' => 'zf2',
//   ),
// );
</code>

===== PhpArray =====

<code php>
$config = new Zend\Config\Config([
  'core' => [
    'author' => 'zf2'
  ]
]);
$writer = new Zend\Config\Writer\PhpArray;
$writer->toString($config);
</code>

===== Ini =====

<code php>
$config = new Zend\Config\Config([
  'core' => [
    'author' => 'zf2'
  ]
]);
$writer = new Zend\Config\Writer\Ini;
$writer->toString($config);
</code>

===== Json =====

<code php>
$config = new Zend\Config\Config([
  'core' => [
    'author' => 'zf2'
  ]
]);
$writer = new Zend\Config\Writer\Json;
$writer->toString($config);
</code>

===== Xml =====

<code php>
$config = new Zend\Config\Config([
  'core' => [
    'author' => 'zf2'
  ]
]);
$writer = new Zend\Config\Writer\Xml;
$writer->toString($config);
</code>

===== Yaml =====

<code php>
$config = new Zend\Config\Config([
  'core' => [
    'author' => 'zf2'
  ]
]);
$writer = new Zend\Config\Writer\Yaml;
$writer->toString($config);
</code>

~~DISQUS~~
