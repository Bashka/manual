====== Семантика ======

===== ValidatorInterface =====

Интерфейс ''ValidatorInterface'' описывает механизмы валидации данных и сбор сообщений об ошибках валидации.

  * ''isValid'' - выполняет валидацию
  * ''getMessages'' - предоставляет массив сообщений об ошибках валидации

====== Реализация ======

===== AbstractValidator =====

Абстрактный класс ''AbstractValidator'' реализует базовую логику интерфейса ''ValidatorInterface'', включая механизм сбора сообщений об ошибках, конфигурирование валидатора и транслятор.

Переопределяемые свойства:

  * ''$messageTemplates'' - словарь допустимых сообщений об ошибках валидации, индектированный именами ошибок
  * ''$messageVariables'' - словарь доступных в сообщениях об ошибках валидации переменных

<code php>
class MyValidator extends AbstractValidator{
  // Ключи ошибок валидации.
  const INVALID = 'stringInvalid';
  const INVALID_LENGTH = 'stringInvalidLength';

  // Сообщения ошибок валидации.
  protected $messageTemplates = [
    self::INVALID => 'Invalid type given. String expected',
    self::INVALID_LENGTH => 'The input should have a length of %length% characters',
  ];

  // Переменные сообщений ошибок валидации.
  protected $messageVariables = [
    'length' => ['options' => 'length'],
  ];

  // Опции валидатора.
  protected $options = [
    'length' => null,
  ];

  public function setLength($length){
    $this->options['length'] = $length;
  }

  public function getLength(){
    return $this->options['length'];
  }

  public function isValid($value){
    if(!is_string($value)){
      $this->error(self::INVALID);
      return false;
    }

    $this->setValue($value);

    if(strlen($value) != $this->getLength()){
      $this->error(self::INVALID_LENGTH)
      return false;
    }

    return true;
  }
}
</code>

===== StaticValidator =====

Класс ''StaticValidator'' это статическое хранилище валидаторов, которое может использоваться для быстрой фильтрации данных.

<code php>
if(StaticValidator($data, 'isFloat')){
  ...
}
else{
  ...
}
</code>

===== Стандартные фильтры =====

  * **Базовые типы:**
    * Alnum - только буквенные символы и числа;
    * Alpha - только буквенные символы;
    * Digits - только числа (целые и дробные);
    * NotEmpty - не пустое значение;
    * StringLength - строка заданной длины;

<code php>
$validator = new Zend\Validator\StringLength(['max' => 6);
$validator->isValid("Test"); // true
$validator->isValid("Testing"); // false
</code>

    * Date - дата;

<code php>
$validator = new Zend\Validator\Date(['format' => 'Y']);
$validator->isValid('2010'); // true
$validator->isValid('May');  // false
</code>

  * **Функции:**
    * Callback - функция, используемая для валидации. В качестве функции может выступать как имя, так и лямбда-функция;

<code php>
class MyClass{
    public static function test($value){
        ...
    }
}

$valid = new Zend\Validator\Callback(['MyClass', 'test']);
echo $valid->isValid($input);
</code>

  * Файловая система и сеть:
    * EmailAddress - адрес электронной почты;
    * Ip - IP адрес;
    * Hostname - домен;
  * **Разное:**
    * Regex - регулярное выражение, используемое для валидации;

<code php>
$validator = new Zend\Validator\Regex(['pattern' => '/^Test/']);
$validator->isValid("Test"); // true
$validator->isValid("Testing"); // true
$validator->isValid("Pest"); // false
</code>

    * InArray - значение соответствует одному из перечисленных.

<code php>
$validator = new Zend\Validator\InArray(['haystack' => ['value1', 'value2',...'valueN']]);
echo $validator->isValid('value');
</code>

~~DISQUS~~
