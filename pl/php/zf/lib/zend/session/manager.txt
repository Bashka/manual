====== Семантика ======

===== ManagerInterface =====

Менеджер сессии агрегирует [[.:config|Config]], [[.:storage|Storage]] и [[.:save_handler|SaveHandler]], предоставляя единый механизм управления сессией. Класс менеджера должен реализовывать интерфейс ''ManagerInterface'' со следующими основными методами:

  * ''setConfig/getConfig'' - устанавливает и получает конфигурацию менеджера
  * ''setStorage/getStorage'' - устанавливает и получает хранилище данных сессии
  * ''setSaveHandler/getSaveHandler'' - устанавливает и получает драйвер постоянного хранилища данных сессии
  * ''sessionExists'' - проверяет, начата ли сессия
  * ''writeClose'' - сохраняет данные сессии в постоянном хранилище и делает хранилище неизменяемым до завершения текущей сессии
  * ''start'' - начинает сессию считывая данные из постоянного хранилища в хранилище сессии. Если SID не был передан, устанавливает его передавая заголовок ''Set-Cookie''
  * ''destroy'' - закрывает ранее открытую сессию и удаляет все связанные с ней данные
  * ''setName/getName'' - устанавливает и получает имя сессии
  * ''setId/getId'' - устанавливает и получает SID текущей сессии
  * ''regenerateId'' - заменяет текущую сессию новой генерируя новый SID

====== Реализация ======

===== SessionManager =====

Класс ''SessionManager'' представляет реализацию интерфейса ''ManagerInterface''.

Работа с данными сессии:
<code php>
$sm = new SessionManager;
$sm->start();
$userId = $sm->getStorage()['id'];
</code>

Использование кастомного SID:
<code php>
$sm = new SessionManager;
if($sid = $request->getHeaders('X-Auth-Token')){
  $sm->setId($sid); // Установка текущего SID с передачей заголовка Set-Cookie
}
$sm->start(); // Если SID не определен, он будет сгенерирован автоматически
</code>

Замена SID:
<code php>
$sm->start(); // Старт текущей сессии
$sm->destroy(); // Уничтожение текущей сессии
$sm->setId('...'); // Смена идентификатора сессии
session_start(); // Перезапуск сессии
</code>

~~DISQUS~~
