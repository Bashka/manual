====== Семантика ======

===== StorageInterface =====

После чтения полезных данных сессии из постоянного хранилища (с помощью механизма [[.:save_handler|SaveHandler]]), они помещаются менеджером в специальное хранилище (заменяя тем самым прямой доступ через глобальный массив ''$_SESSION''), описываемое интерфейсом ''StorageInterface''. Он наследует стандартные интерфейсы PHP, позволяющие обращаться с его экземплярами как с массивами.

  * ''lock/unlock/isLocked'' - блокирует, разблокирует и проверяет блокировку у конкретных данных в хранилище
  * ''markImmutable/isImmutable'' - делает хранилище не изменяемым (полный запрет, даже на конфигурирование хранилища) и проверяет данный флаг
  * ''setMetadata/getMetadata'' - записывает и получает метаданные для конкретных данных в хранилище
  * ''clear'' - отчищает хранилище или удаляет из него конкретные данные
  * ''fromArray/toArray'' - восстанавливает данные из массива и возвращает их в виде массива

====== Реализация ======

===== ArrayStorage =====

Данный класс хранит данные в обычном массиве (расширяя ''Zend\Stdlib\ArrayObject'') и не взаимодействует с ''$_SESSION'', что не позволяет сохранять их в постоянном хранилище. В связи с этим, данный класс лучше использовать в качестве базового либо реализовать с его помощью механизм сохранения данных сессии в постоянном хранилище, отличный от предложенного в PHP.

===== SessionStorage =====

Данный класс расширяет ''ArrayStorage'', заставляя последний использовать именно ''$_SESSION'' в качестве массива для хранения данных, что обеспечивает возможность сохранения данных этим классом в постоянном хранилище.

===== SessionArrayStorage =====

Данный класс аналогичен ''SessionStorage'', с той лишь разницей, что он не расширяет ''ArrayStorage'', а реализует его логику самостоятельно.

~~DISQUS~~
