====== Семантика ======

===== StreamInterface =====

Тело [[.:message|сообщения]] должно быть представлено классом-потоком ввода/вывода, реализующим интерфейс ''StreamInterface''. Это позволяет обрабатывать сообщения с большими объемами данных (на пример файлами).

  * ''detach'' - отключается от потока
  * ''close'' - закрывает поток
  * ''getSize'' - предоставляет размер данных в потоке (в байтах)
  * ''tell'' - возвращает текущую позицию курсора в потоке
  * ''eof'' - определяет, достигнут ли конец потока
  * ''isSeekable'' - определяет возможность сдвига курсора в потоке
  * ''seek'' - сдвигает курсор в потоке, если это возможно
  * ''rewind'' - устанавливает курсор на начало потока, если это возможно
  * ''isWritable'' - определяет возможность записи в поток
  * ''write'' - записывает данные в поток
  * ''isReadable'' - определяет возможность чтения из потока
  * ''read'' - считывает данные (указанной длины) из потока
  * ''getContents'' - считывает все данные из потока
  * ''getMetadata'' - предоставляет метаданные потока

====== Реализация ======

===== Stream =====

Класс ''Stream'' реализует интерфейс ''StreamInterface'', а так же включает метод ''attach'', позволяющий повторно связать поток с ресурсом.

<code php>
$stream = new Stream('php://input', 'r');
if($stream->isReadable()){
  $data = $stream->getContents();
}
$stream->detach();

$stream->attach('php://output', 'w');
if($stream->isWritable()){
  $stream->write($data);
}
$stream->close();
</code>

===== CallbackStream =====

Класс ''CallbackStream'' реализует интерфейс ''StreamInterface'' используя в качестве ресурса возвращаемое значение функции. Этот поток не поддерживает чтение или запись, но реализует метод ''getContents'', который и предоставляет результат работы функции.

<code php>
$stream = new CallbackStream(function(){
  ...
  return $data;
});
echo $stream->getContents();
$stream->close();
</code>

===== RelativeStream =====

Класс ''RelativeStream'' реализует интерфейс ''StreamInterface'', но используется в качестве декоратора для другого потока. Данный класс позволяет обрабатывать часть данных исходного потока, не нагружая память.

<code php>
$strem = new Stream('php://input', 'r');
$rstream = new RelativeStream($strem, $strem->getSize() - 100); // Работа с последними 100 байтами
echo $rstream->getContents(); // Получение последних 100 байт
$rstream->close();
</code>

===== PhpInputStream =====

Класс ''PhpInputStream'' расширяет ''Stream'', добавляя логику кеширующего чтения. Данный поток обычно применяется для работы с ''%%php://input%%'', но может быть так же использован с любым входным потоком.

<code php>
$stream = new PhpInputStream;
$data = $stream->getContents();
echo $stream->getContents(); // Чтение из кеша
$stream->close();
</code>

~~DISQUS~~
